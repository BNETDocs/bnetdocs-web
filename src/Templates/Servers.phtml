<?php /* vim: set colorcolumn= expandtab shiftwidth=2 softtabstop=2 tabstop=4 smarttab: */
namespace BNETDocs\Templates;
use \BNETDocs\Libraries\ServerType;
use \BNETDocs\Libraries\User;
use \CarlBennett\MVC\Libraries\Common;
use \CarlBennett\MVC\Libraries\Pair;
$title = 'Server List';
$description = 'This is a list of servers that are well-known and monitored for port status.';
$this->opengraph->attach(new Pair('url', '/servers'));

$servers_by_type = [];
foreach ($this->context->servers as $server) {
  $servers_by_type[$server->getTypeId()][] = $server;
}
ksort($servers_by_type);

$can_server_create = $this->getContext()->active_user && $this->getContext()->active_user->getOption(User::OPTION_ACL_SERVER_CREATE);
$can_server_modify = $this->getContext()->active_user && $this->getContext()->active_user->getOption(User::OPTION_ACL_SERVER_MODIFY);

require('./header.inc.phtml'); ?>
<div class="container">
<?=($can_server_create ? sprintf('<a class="btn btn-success text-white float-right" href="%s">Create Server</a>', Common::relativeUrlToAbsolute('/server/create')) : '')?>
  <h1><?=$title?></h1>
  <div class="row"><div class="col">
    <p><?=$description?></p>
    <p>The status represents if the port is opened or closed, not if the service is functioning correctly. These are the statuses a server could be in:</p>
    <ul>
      <li><span class="text-success">Online</span>: The port is open.</li>
      <li><span class="text-danger">Offline</span>: The port is closed.</li>
      <li><span class="text-warning">Disabled</span>: The server is not actively checked.</li>
    </ul>
    <p>We have a total of <strong><?=number_format(count($this->context->servers))?> servers</strong> that we monitor. <a href="<?=Common::relativeUrlToAbsolute('/servers.json')?>">Click here</a> to see this list in JSON format.</p>
  </div></div>
  <div class="row"><div class="col">
    <table class="table table-hover table-sm table-striped" id="servers_tbl">
      <thead><tr><th scope="col">Status</th><th scope="col">Label</th><th scope="col">Address</th><th scope="col"></th></tr></thead><tbody>
<?    foreach ($servers_by_type as $type_id => $servers)
      {
        $server_type = new ServerType($type_id);
        $server_type_label = filter_var($server_type->getLabel(), FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        printf('<tr><th scope="row" colspan="4">%s</th></tr>', $server_type_label);
        foreach ($servers as $server)
        {
          $server_id = $server->getId();
          $server_label = filter_var($server->getLabel(), FILTER_SANITIZE_FULL_SPECIAL_CHARS);
          $server_online = $server->isOnline();
          if ($server->isDisabled())
          {
            $server_status = '<span class="text-warning">Disabled</span>';
          }
          else
          {
            $server_status = sprintf('<span class="text-%s">%s</span>',
              ($server_online ? 'success' : 'danger'), ($server_online ? 'Online' : 'Offline')
            );
          }
?>
        <tr>
          <td class="font-weight-bold text-center"><?=$server_status?></td>
          <td><?=($server->getLabel() != $server->getAddress() && !empty($server->getLabel()) ? $server_label : '&nbsp;')?></td>
          <td><code><?=$server->getAddress()?>:<?=$server->getPort()?></code></td>
          <td>
<?=($can_server_modify ? sprintf('<a class="btn btn-sm btn-secondary" href="%s" title="Edit Server for %s">📝</a>', Common::relativeUrlToAbsolute(sprintf('/server/edit?id=%d', $server_id)), $server_label) : '')?>
            <a class="btn btn-sm btn-primary" href="<?=$server->getURI()?>" title="View Server Details for <?=$server_label?>">🔎</a></td>
        </tr>
<?    }} ?>
      </tbody>
    </table>
  </div></div>
</div>
<? ob_start(); ?>
  <script type="text/javascript">
    $(document).ready(function(){
      $('#servers_tbl').DataTable({
        "language": {"zeroRecords": "No matching servers found"},
        "responsive": true,
      });
    });
  </script>
<? $_footer_script = ob_get_clean(); require('./footer.inc.phtml'); ?>
